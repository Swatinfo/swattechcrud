<?php

namespace SwatTech\Crud\Contracts;

/**
 * Interface GeneratorInterface
 * 
 * This interface defines the standard methods that all code generators must implement.
 * It provides a consistent API for generating code files from database tables
 * and allows for customization through options.
 *
 * @package SwatTech\Crud\Contracts
 */
interface GeneratorInterface
{
    /**
     * Generate code files for the specified database table.
     *
     * This is the main method for generating code. It should analyze the table structure
     * and create the necessary files (models, controllers, views, etc.) based on
     * the provided options.
     *
     * @param string $table The name of the database table to generate code for
     * @param array $options Optional configuration options to customize the generation
     * @return array Returns an array of generated file paths
     */
    public function generate(string $table, array $options = []): array;

    /**
     * Set configuration options for the generator.
     *
     * This allows for customizing the generator's behavior by providing various options
     * such as paths, namespaces, and feature toggles.
     *
     * @param array $options The configuration options for the generator
     * @return self Returns the generator instance for method chaining
     */
    public function setOptions(array $options): self;

    /**
     * Get the stub template content for code generation.
     *
     * Stubs are template files used to generate code. This method should retrieve
     * the appropriate stub content based on the generator's context.
     *
     * @return string The stub template content
     */
    public function getStub(string $filename): string;

    /**
     * Get the namespace for generated classes.
     *
     * This method should return the PHP namespace to use for generated code files,
     * following PSR-4 autoloading standards.
     *
     * @return string The namespace for generated classes
     */
    public function getNamespace(): string;

    /**
     * Get the file path where generated files should be saved.
     *
     * This method should return the absolute or relative path where generated
     * files should be stored based on the generator's context.
     *
     * @return string The file path for generated files
     */
    public function getPath(string $filename): string;

    /**
     * Get the class name for the generated file.
     *
     * This method should generate an appropriate class name based on the table name
     * and the generator's context (e.g., UserController, UserModel).
     *
     * @param string $table The database table name
     * @return string The generated class name
     */
    public function getClassName(string $table, string $action): string;

    /**
     * Get a list of all generated file paths.
     *
     * This method should return an array of all files generated by the generator,
     * including their full paths.
     *
     * @return array<string> List of generated file paths
     */
    public function getGeneratedFiles(): array;

    /**
     * Determine if the generator supports customization.
     *
     * This method should return whether the generator supports customization
     * through options, stubs, or other mechanisms.
     *
     * @return bool True if the generator supports customization, false otherwise
     */
    public function supportsCustomization(): bool;
}
